/// Contains implementations of the data_lake::StreamerMessage to NEARBlock conversion
pub mod data_lake;
/// Contains implementations of the data_lake::StreamerMessage subtypes to NEARBlock subtypes conversions
pub mod data_lake_conversion;
/// Contains implementations of the nearcore::StreamerMessage to NEARBlock conversion
pub mod nearcore;

#[cfg(test)]
mod tests {
    use crate::near_block::NEARBlock;

    use super::*;

    /// Test the conversion of a data_lake::StreamerMessage to a NEARBlock
    ///
    /// Input:
    /// - Pre-saved data_lake::StreamerMessage as a json
    /// - Pre-saved NEARBlock as json that was generated by the obsolete `convert` with `ch_json` conversion
    ///
    /// Output:
    /// - NEARBlock converted from the data_lake::StreamerMessage should be equal to the pre-saved NEARBlock
    #[test]
    fn test_data_lake_conversion() {
        let near_block_v1: NEARBlock = serde_json::from_str(include_str!(
            "../tests/res/block_190534818_branch_main.json"
        ))
        .expect("Failed to load NEARBlock v1");
        let json_near_block_v1 = serde_json::to_string_pretty(&near_block_v1).unwrap();
        let near_block_v2: NEARBlock = serde_json::from_str(include_str!(
            "../tests/res/block_190534818_branch_remove_custom_indexer.json"
        ))
        .expect("Failed to load NEARBlock v2");
        let json_near_block_v2 = serde_json::to_string_pretty(&near_block_v2).unwrap();
        let streamer_message_data_lake: near_lake_framework::near_indexer_primitives::StreamerMessage = serde_json::from_str(include_str!(
            "../tests/res/streamer_message_190534818_branch_remove_custom_indexer.json"
        ))
        .expect("Failed to load StreamerMessage using data_lake's API");

        let near_block_converted_using_data_lake = data_lake::convert(streamer_message_data_lake);
        let json_near_block_converted_using_data_lake =
            serde_json::to_string_pretty(&near_block_converted_using_data_lake).unwrap();

        assert_eq!(
            json_near_block_v1,
            json_near_block_converted_using_data_lake
        );
        assert_eq!(
            json_near_block_v2,
            json_near_block_converted_using_data_lake
        );
    }

    /// Test the conversion of a nearcore::StreamerMessage to a NEARBlock
    ///
    /// Input:
    /// - Pre-saved nearcore::StreamerMessage as a json
    /// - Pre-saved NEARBlock as json that was generated by the obsolete `convert` with `ch_json` conversion
    ///
    /// Output:
    /// - NEARBlock converted from the nearcore::StreamerMessage should be equal to the pre-saved NEARBlock
    #[test]
    fn test_nearcore_conversion() {
        let near_block_v1: NEARBlock = serde_json::from_str(include_str!(
            "../tests/res/block_190534818_branch_main.json"
        ))
        .expect("Failed to load NEARBlock v1");
        let json_near_block_v1 = serde_json::to_string_pretty(&near_block_v1).unwrap();
        let near_block_v2: NEARBlock = serde_json::from_str(include_str!(
            "../tests/res/block_190534818_branch_remove_custom_indexer.json"
        ))
        .expect("Failed to load NEARBlock v2");
        let json_near_block_v2 = serde_json::to_string_pretty(&near_block_v2).unwrap();
        let streamer_message_nearcore: near_indexer::StreamerMessage =
            serde_json::from_str(include_str!(
                "../tests/res/streamer_message_190534818_branch_remove_custom_indexer.json"
            ))
            .expect("Failed to load StreamerMessage using nearcore's API");

        let near_block_converted_using_nearcore = nearcore::convert(streamer_message_nearcore);
        let json_near_block_converted_using_nearcore =
            serde_json::to_string_pretty(&near_block_converted_using_nearcore).unwrap();

        assert_eq!(json_near_block_v1, json_near_block_converted_using_nearcore);
        assert_eq!(json_near_block_v2, json_near_block_converted_using_nearcore);
    }
}
