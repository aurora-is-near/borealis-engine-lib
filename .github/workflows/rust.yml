name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:

env:
  RUST_VERSION: 1.70.0

jobs:
  fmt:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt
          profile: minimal
          override: true
      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cargo Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy
          profile: minimal
          override: true
      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets -- -D clippy::all

  test:
    name: ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [Linux, macOS]
        include:
          - build: Linux
            os: ubuntu-latest
          - build: macOS
            os: macos-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cargo Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - name: Install rust wasm32-unknown-unknown
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --exclude aurora-refiner-app-integration-tests
  run-test:
    name: Run app test
    runs-on: [ self-hosted, heavy ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Restore cache
        run: cache-util restore borealis-engine-lib@target@generic@${{ hashFiles('**/Cargo.lock') }}:target
      - name: Run tests
        run: |
          rustup target add wasm32-unknown-unknown
          cargo test -p aurora-refiner-app-integration-tests
      - name: Save cache
        run: cache-util msave borealis-engine-lib@target@generic@${{ hashFiles('**/Cargo.lock') }}:target
