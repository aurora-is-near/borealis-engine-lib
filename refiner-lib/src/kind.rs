use std::str::FromStr;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum TxKind {
    Submit,
    Call,
    PausePrecompiles,
    ResumePrecompiles,
    Deploy,
    DeployErc20,
    DeployErc20Callback,
    FtOnTransfer,
    Deposit,
    FtTransferCall,
    FinishDeposit,
    ResolveTransfer,
    FtTransfer,
    Withdraw,
    StorageDeposit,
    StorageUnregister,
    StorageWithdraw,
    SetPausedFlags,
    RegisterRelayer,
    ExitToNear,
    SetConnectorData,
    NewConnector,
    NewEngine,
    FactoryUpdate,
    FactoryUpdateAddressVersion,
    FactorySetWNearAddress,
    SetOwner,
    SubmitWithArgs,
    SetUpgradeDelayBlocks,
    FundXccSubAccount,
    PauseContract,
    ResumeContract,
    SetKeyManager,
    AddRelayerKey,
    StoreRelayerKeyCallback,
    RemoveRelayerKey,
    StartHashchain,
    SetErc20Metadata,
    SetEthConnectorContractAccount,
    SetFixedGas,
    SetErc20FallbackAddress,
    SetSiloParams,
    SetWhitelistStatus,
    SetWhitelistsStatuses,
    AddEntryToWhitelist,
    AddEntryToWhitelistBatch,
    RemoveEntryFromWhitelist,
    MirrorErc20TokenCallback,
    WithdrawWnearToRouter,

    Unknown,
}

impl FromStr for TxKind {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "submit" => Ok(Self::Submit),
            "call" => Ok(Self::Call),
            "pause_precompiles" => Ok(Self::PausePrecompiles),
            "resume_precompiles" => Ok(Self::ResumePrecompiles),
            "deploy_code" => Ok(Self::Deploy),
            "deploy_erc20_token" => Ok(Self::DeployErc20),
            "deploy_erc20_token_callback" => Ok(Self::DeployErc20Callback),
            "ft_on_transfer" => Ok(Self::FtOnTransfer),
            "deposit" => Ok(Self::Deposit),
            "ft_transfer_call" => Ok(Self::FtTransferCall),
            "finish_deposit" => Ok(Self::FinishDeposit),
            "ft_resolve_transfer" => Ok(Self::ResolveTransfer),
            "ft_transfer" => Ok(Self::FtTransfer),
            "withdraw" => Ok(Self::Withdraw),
            "storage_deposit" => Ok(Self::StorageDeposit),
            "storage_unregister" => Ok(Self::StorageUnregister),
            "storage_withdraw" => Ok(Self::StorageWithdraw),
            "set_paused_flags" => Ok(Self::SetPausedFlags),
            "register_relayer" => Ok(Self::RegisterRelayer),
            "exit_to_near_precompile_callback" => Ok(Self::ExitToNear),
            "set_eth_connector_contract_data" => Ok(Self::SetConnectorData),
            "new_eth_connector" => Ok(Self::NewConnector),
            "new" => Ok(Self::NewEngine),
            "factory_update" => Ok(Self::FactoryUpdate),
            "factory_update_address_version" => Ok(Self::FactoryUpdateAddressVersion),
            "factory_set_wnear_address" => Ok(Self::FactorySetWNearAddress),
            "set_owner" => Ok(Self::SetOwner),
            "submit_with_args" => Ok(Self::SubmitWithArgs),
            "set_upgrade_delay_blocks" => Ok(Self::SetUpgradeDelayBlocks),
            "fund_xcc_sub_account" => Ok(Self::FundXccSubAccount),
            "pause_contract" => Ok(Self::PauseContract),
            "resume_contract" => Ok(Self::ResumeContract),
            "set_key_manager" => Ok(Self::SetKeyManager),
            "add_relayer_key" => Ok(Self::AddRelayerKey),
            "store_relayer_key_callback" => Ok(Self::StoreRelayerKeyCallback),
            "remove_relayer_key" => Ok(Self::RemoveRelayerKey),
            "start_hashchain" => Ok(Self::StartHashchain),
            "set_erc20_metadata" => Ok(Self::SetErc20Metadata),
            "set_eth_connector_contract_account" => Ok(Self::SetEthConnectorContractAccount),
            "set_fixed_gas" => Ok(Self::SetFixedGas),
            "set_erc20_fallback_address" => Ok(Self::SetErc20FallbackAddress),
            "set_silo_params" => Ok(Self::SetSiloParams),
            "set_whitelist_status" => Ok(Self::SetWhitelistStatus),
            "set_whitelists_statuses" => Ok(Self::SetWhitelistsStatuses),
            "add_entry_to_whitelist" => Ok(Self::AddEntryToWhitelist),
            "add_entry_to_whitelist_batch" => Ok(Self::AddEntryToWhitelistBatch),
            "remove_entry_from_whitelist" => Ok(Self::RemoveEntryFromWhitelist),
            "mirror_erc20_token_callback" => Ok(Self::MirrorErc20TokenCallback),
            "withdraw_wnear_to_router" => Ok(Self::WithdrawWnearToRouter),
            "unknown" => Ok(Self::Unknown),
            _ => Err(()),
        }
    }
}
